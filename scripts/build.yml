parameters:
  os: "win"

steps:
  - task: NodeTool@0
    inputs:
      versionSpec: "8.x"
    displayName: "Install Node.js"

  - bash: npm install
    displayName: "Install npm packages"

  - bash: npm run prebuild
    displayName: "prebuild"
  - bash: |
      pkgchannel=$(node -e "require('./scripts/getver.js').default("channel")")
      if[$(channel)!=$(pkgchannel)]
      then
        (1>&2 echo ERROR: Channel information in package.json does not match pipeline:)
        (1>&2 echo ERROR: Channel in package.json = "$(pkgchannel)" while pipeline channel = "$(channel)" )
      fi
    failOnStderr: true
    condition: ne('$(Build.Reason)', 'PullRequest')

    # Bump transient version
  - bash: | # set prever to build number for canary and next
      node -e "require('./scripts/setver.js').default({'channel':$(channel),'comp':'pre', 'val':$(Build.BuildId)})"
    displayName: "Set prerelease version for canary and next"
    condition: or(eq($(channel), "canary"), eq($(channel), "next"))

  - bash: npm run "build-$(parameters.os):$(channel)" -- -c.buildVersion=$(Build.BuildId)
    displayName: "Build binaries"

  - bash: npm test
    displayName: "Run tests"

  - bash: ls -l '$(Build.SourcesDirectory)'

  - bash: |
      cd "$(Build.ArtifactStagingDirectory)"
      mkdir "release" # actual release binaries
      mkdir "pipe" # used to pass information to release pipeline
    displayName: "Create release and pipe folders"

  - task: CopyFiles@2
    inputs:
      sourceFolder: "$(Build.SourcesDirectory)/compiled"
      contents: "**"
      overWrite: true
      # artifactName: drop-$(parameters.os)
      targetFolder: "$(Build.ArtifactStagingDirectory)/release"
    displayName: "Copy all compiled files"

  - task: DeleteFiles@1
    inputs:
      contents: "*mac"
      sourceFolder: "$(Build.ArtifactStagingDirectory)/release"
    displayName: "Delete unpacked files"

  - task: DeleteFiles@1
    inputs:
      contents: "*unpacked"
      sourceFolder: "$(Build.ArtifactStagingDirectory)/release"
    displayName: "Delete unpacked files"

  - task: CopyFiles@2
    inputs:
      sourceFolder: "$(Build.SourcesDirectory)/scripts/release_scripts"
      contents: "**"
      overWrite: true
      # artifactName: drop-$(parameters.os)
      targetFolder: "$(Build.ArtifactStagingDirectory)/pipe"
    displayName: "Copy pipe scripts"

  - bash: |
      cd "$(Build.ArtifactStagingDirectory)/release"
      mkdir "windows"
      mkdir "mac"
      mkdir "linux"
      mkdir "linux-ia32"

      # move windows
      mv nsis-web/latest.yml $(pwd)
      mv nsis-web/* "windows/"
      rm nsis-web/

      # move mac
      mv *.dmg "mac/"
      mv *.dmg.blockmap "mac/"
      mv *mac.zip "mac/"

      # move linux
      mv *x86_64.AppImage "linux/"
      mv *i386.AppImage "linux-ia32/"

      cd "$(Build.SourcesDirectory)"
      # correct path mappings
      node -e "require('./scripts/setdistpaths.js').default({'directory':'$(Build.ArtifactStagingDirectory)/release', 'author':$(git_project_owner), 'projectname':$(git_project_name)})"
      # node -e "require('./scripts/setdistpaths.js').default('$(pwd)')"
    displayName: "Move artifact files and correct mappings"

  - bash: |
      cd "$(Build.SourcesDirectory)"
      node -e "require('./scripts/setpipe.js').default({'dir':'$(Build.ArtifactStagingDirectory)/pipe', 'version':'$(version)', 'branch':'$(branch)', 'tag':'$(tag)', 'channel':'$(channel)')"
    displayName: "Set pipe info"

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: "$(Build.ArtifactStagingDirectory)"
    displayName: "Publish artifacts"
