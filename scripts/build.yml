steps:
  - checkout: self
    persistCredentials: true

  - task: NodeTool@0
    inputs:
      versionSpec: "10.x"
    displayName: "Install Node.js"

  - bash: npm install
    displayName: "Install npm packages"

  - bash: npm run prebuild
    displayName: "prebuild"

  - bash: | # Switch channel info if incorrect
      chmod u+x scripts/updpackagechannel.sh
      ./scripts/updpackagechannel.sh
    displayName: "Switch channel info to $(channel)"

    # Bump transient version
  - bash: |
      chmod u+x scripts/transientbumpver.sh
      ./scripts/transientbumpver.sh
    displayName: "Set transient version"

  - bash: |
      version=$(node -p 'require("./scripts/getver.js").default("full")')
      tag=v${version}
      node -e "require('./scripts/updadjust.js').default({'tag':'${tag}','projectName':'$(git_project_name)','projectOwner':'$(git_project_owner)','channel':'$(channel)'})"

    displayName: "Set configuration for autoupdate"

  - task: DownloadSecureFile@1
    inputs:
      secureFile: "Hexellate_codesign.p12"

  - bash: |
      if [[ "${AGENT_OS}" == "Darwin" ]]
        then
          OS="mac"
        elif [[ "${AGENT_OS}" == "Windows_NT" ]]
        then
          OS="win"
        elif [[ "${AGENT_OS}" == "Linux" ]]
        then
          OS="lin"
      fi
      npm run "build-${OS}:$(channel)" -- -c.buildVersion=$(Build.BuildId)
    displayName: "Build binaries"
    env:
      WIN_CSC_KEY_PASSWORD: $(WIN_CSC_KEY_PASSWORD)
      WIN_CSC_LINK: $(WIN_CSC_LINK)

  - bash: npm test
    displayName: "Run tests"

  - bash: ls -l '$(Build.SourcesDirectory)'

  - bash: |
      cd "$(Build.ArtifactStagingDirectory)"
      mkdir "release" # actual release binaries
      mkdir "pipe" # used to pass information to release pipeline
    displayName: "Create release and pipe folders"

  - task: CopyFiles@2
    inputs:
      sourceFolder: "$(Build.SourcesDirectory)/compiled"
      contents: "**"
      overWrite: true
      targetFolder: "$(Build.ArtifactStagingDirectory)/release"
    displayName: "Copy all compiled files"

  - task: DeleteFiles@1
    inputs:
      contents: "*mac"
      sourceFolder: "$(Build.ArtifactStagingDirectory)/release"
    displayName: "Delete unpacked mac files"

  - task: DeleteFiles@1
    inputs:
      contents: "*unpacked"
      sourceFolder: "$(Build.ArtifactStagingDirectory)/release"
    displayName: "Delete other unpacked files"

  - task: CopyFiles@2
    inputs:
      sourceFolder: "$(Build.SourcesDirectory)/scripts/release_scripts"
      contents: "**"
      overWrite: true
      targetFolder: "$(Build.ArtifactStagingDirectory)/pipe"
    displayName: "Copy pipe scripts"

  - bash: |
      cd "$(Build.ArtifactStagingDirectory)/release"
      mkdir "windows"
      mkdir "mac"
      mkdir "linux"
      mkdir "linux-ia32"

      # move windows
      rm latest.yml
      mv nsis-web/latest.yml $(pwd)
      mv nsis-web/* "windows/"
      mv *.exe "windows/"
      mv *.exe.blockmap "windows/"
      rm nsis-web/

      # move mac
      mv *.dmg "mac/"
      mv *.dmg.blockmap "mac/"
      mv *mac.zip "mac/"

      # move linux
      mv *x86_64.AppImage "linux/"
      mv *i386.AppImage "linux-ia32/"

      cd "$(Build.SourcesDirectory)"
      # correct path mappings
      node -e "require('./scripts/setdistpaths.js').default({'directory':'${BUILD_ARTIFACTSTAGINGDIRECTORY//\\//}/release', 'author':'$(git_project_owner)', 'projectname':'$(git_project_name)'})"
    displayName: "Move artifact files and correct mappings"

  - bash: |
      echo ${version}
      echo ${tag}
      cd "$(Build.SourcesDirectory)"
      branch=${BUILD_SOURCEBRANCHNAME}
      version=$(node -p 'require("./scripts/getver.js").default("full")')
      tag=v${version}
      node -e "require('./scripts/setpipe.js').default({'dir':'${BUILD_ARTIFACTSTAGINGDIRECTORY//\\//}', 'version':'${version}', 'branch':'${branch}', 'tag':'${tag}', 'channel':'$(channel)', 'commit':'$(Build.SourceVersion)'})"
    displayName: "Set pipe info"

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: "$(Build.ArtifactStagingDirectory)"
    displayName: "Publish artifacts"
