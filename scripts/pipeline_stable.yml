trigger:
  branches:
    include:
      - master
      - hotfix/*
  paths:
    exclude:
      - .github/
      - /*.md
      - /*.graphml

pr:
  branches:
    include:
      - master

variables:
  channel: "stable"

jobs:
  - job: setupenv
    pool:
      vmImage: "vs2017-win2016"
    steps:
      - bash: |
          echo "##vso[task.setvariable variable=branchtype]indev"
        condition: or(startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/'), startsWith(variables['Build.SourceBranch'], 'refs/heads/hotfix/'))
      - bash: |
          echo "##vso[task.setvariable variable=branchtype]rel"
        condition: or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/develop'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))
      - bash: |
          echo "##vso[task.setvariable variable=branchtype;isOutput=true]"$(branchtype)
        name: echobranchtype
      - checkout: self
        persistCredentials: true
      - bash: | # on merge from hotfix, bump patch
          echo commit is merge from hotfix
          git checkout master
          echo git status
          git status
          echo increment patch ver
          node -e "require('./scripts/bumpver.js').default({'channel':'stable','bump':'patch'})"
          git add "package.json"
          newver="$(node -p 'require("./scripts/getver.js").default()')"
          git commit -m "Bump patch ver to ${newver} ***NO_CI***"
          git tag "${newver}"
          echo git status
          git status
          echo git push
          git push --tags origin
          echo git status
          git status
        failOnStderr: true
        condition: or(and(startsWith(variables['Build.SourceVersionMessage'], 'Merge pull request'), contains(variables['Build.SourceVersionMessage'], 'from'), contains(variables['Build.SourceVersionMessage'], '/hotfix/')), startsWith(variables['Build.SourceVersionMessage'], 'Merge branch \'hotfix/')) # Approximately matches either "Merge pull request*from*/hotfix/*" or "Merge branch '/hotfix/*"
      - bash: | # on merge from release, remove channel info
          echo commit is merge from release
          git checkout master
          echo git status
          git status
          echo increment patch ver
          node -e "require('./scripts/bumpver.js').default({'channel':'stable','bump':''})"
          git add "package.json"
          newver="$(node -p 'require("./scripts/getver.js").default()')"
          git commit -m "Switch channel info to stable ***NO_CI***"
          git tag "${newver}"
          echo git status
          git status
          echo git push
          git push --tags origin
          echo git status
          git status
        failOnStderr: true
        condition: or(and(startsWith(variables['Build.SourceVersionMessage'], 'Merge pull request'), contains(variables['Build.SourceVersionMessage'], 'from'), contains(variables['Build.SourceVersionMessage'], '/release/')), startsWith(variables['Build.SourceVersionMessage'], 'Merge branch \'release/')) # Approximately matches either "Merge pull request*from*/release/*" or "Merge branch '/release/*"

  # TODO if commit is merge from hotfix, increment ver, push changes and skip next commit build

  - job: win_build
    pool:
      vmImage: "vs2017-win2016"
    dependsOn: setupenv
    steps:
      - template: build.yml
        parameters:
          os: "win"

  - job: lin_build
    pool:
      vmImage: "Ubuntu 16.04"
    dependsOn: setupenv
    steps:
      - template: build.yml
        parameters:
          os: "lin"

  - job: mac_build
    pool:
      vmImage: "macOS-10.13"
    dependsOn: setupenv
    steps:
      - template: build.yml
        parameters:
          os: "mac"
